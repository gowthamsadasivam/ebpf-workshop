name: Run eBPF Trace

on:
  workflow_dispatch:

jobs:
  ebpf-trace:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies (BCC, Python, headers)
        run: |
          sudo apt-get update
          sudo apt-get install -y bpfcc-tools linux-headers-$(uname -r) python3-bpfcc

      - name: Run eBPF Python script
        run: |
          cat > trace_connect.py <<'EOF'
          import os
          from bcc import BPF

          bpf_code = """
          #include <uapi/linux/ptrace.h>
          #include <linux/sched.h>
          #include <linux/net.h>

          int trace_connect(struct pt_regs *ctx) {
              u32 pid = bpf_get_current_pid_tgid() >> 32;
              char comm[16];
              bpf_get_current_comm(&comm, sizeof(comm));

              bpf_trace_printk("%d %s\\n", pid, comm);
              return 0;
          }
          """

          b = BPF(text=bpf_code)
          b.attach_kprobe(event="__x64_sys_connect", fn_name="trace_connect")
          print("Tracing connect... Ctrl+C to exit.")

          def get_proc_details(pid):
              details = {}
              try:
                  details["exe"] = os.readlink(f"/proc/{pid}/exe")
              except Exception:
                  details["exe"] = "N/A"
              try:
                  with open(f"/proc/{pid}/cmdline", "r") as f:
                      cmd = f.read().replace("\\x00", " ").strip()
                      details["cmdline"] = cmd if cmd else "N/A"
              except Exception:
                  details["cmdline"] = "N/A"
              try:
                  with open(f"/proc/{pid}/status") as f:
                      for line in f:
                          if line.startswith("PPid:"):
                              details["ppid"] = line.split()[1]
                              break
              except Exception:
                  details["ppid"] = "N/A"
              return details

          while True:
              (task, pid, cpu, flags, ts, msg) = b.trace_fields()
              try:
                  pid_str, comm = msg.split(" ", 1)
                  pid = int(pid_str)
              except Exception:
                  continue

              details = get_proc_details(pid)
              print(f"[PID {pid}] COMM={comm}, EXE={details['exe']}, CMDLINE={details['cmdline']}, PPID={details['ppid']}")
          EOF

          sudo python3 trace_connect.py
