name: Run eBPF Trace

on:
  workflow_dispatch:   # Trigger manually from GitHub Actions tab

jobs:
  ebpf-trace:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies (BCC, Python, headers)
        run: |
          sudo apt-get update
          sudo apt-get install -y bpfcc-tools linux-headers-$(uname -r) python3-bpfcc

      - name: Run eBPF Python script
        run: |
          cat > trace_connect.py <<'EOF'
          from bcc import BPF

          bpf_code = """
          #include <uapi/linux/ptrace.h>
          #include <linux/sched.h>

          TRACEPOINT_PROBE(syscalls, sys_enter_openat) {
              char comm[16] = {};
              char fname[256] = {};

              bpf_get_current_comm(&comm, sizeof(comm));
              int ret = bpf_probe_read_user_str(&fname, sizeof(fname), args->filename);

              bpf_trace_printk("[EAD] Process: %s\\n", comm);
              bpf_trace_printk("             File: %s\\n", fname);

              return 0;
          }

          TRACEPOINT_PROBE(syscalls, sys_enter_openat2) {
              char comm[16] = {};
              char fname[256] = {};

              bpf_get_current_comm(&comm, sizeof(comm));
              int ret = bpf_probe_read_user_str(&fname, sizeof(fname), args->filename);

              bpf_trace_printk("[READ] Process: %s\\n", comm);
              bpf_trace_printk("             File: %s\\n", fname);

              return 0;
          }
          """

          b = BPF(text=bpf_code)
          print("Tracing ONLY file opens (openat & openat2 tracepoints)... Ctrl+C to stop.")
          b.trace_print()

          EOF

          sudo python3 trace_connect.py
